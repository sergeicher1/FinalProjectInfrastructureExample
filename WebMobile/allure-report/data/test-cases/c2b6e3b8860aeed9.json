{"uid":"c2b6e3b8860aeed9","name":"Test 01: Verify Login Grafana","fullName":"TestCases.test_Web.Test_Web#test_VerifyLoginFlow","historyId":"d360d96a2738fdd918c452cb267645b4","time":{"start":1665993000026,"stop":1665993000026,"duration":0},"description":"This test verifies a successful login to grafana","descriptionHtml":"<p>This test verifies a successful login to grafana</p>\n","status":"broken","statusMessage":"NotADirectoryError: [WinError 267] The directory name is invalid: 'C:\\\\Users\\\\serge\\\\.wdm\\\\drivers\\\\geckodriver\\\\win64\\\\0.32\\\\geckodriver.exe'","statusTrace":"request = <SubRequest 'initWebDriver' for <Function test_VerifyLoginFlow>>\n\n    @pytest.fixture(scope=\"class\")  # If autouse=True added, every test will initiate the driver !!!\n    def initWebDriver(request):\n        if GetData(\"ExecuteApplitools\").lower() == \"yes\":  # Applitools\n            globals()[\"driver\"] = GetWebDriver()\n            '''For Applitools, It doesn't support Events'''\n        else:\n>           edriver = GetWebDriver()\n\nTestCases\\conftest.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTestCases\\conftest.py:93: in GetWebDriver\n    driver = GetFirefox()\nTestCases\\conftest.py:114: in GetFirefox\n    ffDriver = SWebDriver.Firefox(GeckoDriverManager().install())  # Selenium 3x\nC:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:160: in __init__\n    firefox_profile = FirefoxProfile(firefox_profile)\nC:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\firefox\\firefox_profile.py:74: in __init__\n    shutil.copytree(self.profile_dir, newprof,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'C:\\\\Users\\\\serge\\\\.wdm\\\\drivers\\\\geckodriver\\\\win64\\\\0.32\\\\geckodriver.exe'\ndst = 'C:\\\\Users\\\\serge\\\\AppData\\\\Local\\\\Temp\\\\tmp7kvkctaa\\\\webdriver-py-profilecopy'\nsymlinks = False\nignore = <function ignore_patterns.<locals>._ignore_patterns at 0x000001DA22277520>\ncopy_function = <function copy2 at 0x000001DA1F5BE680>\nignore_dangling_symlinks = False, dirs_exist_ok = False\n\n    def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n                 ignore_dangling_symlinks=False, dirs_exist_ok=False):\n        \"\"\"Recursively copy a directory tree and return the destination directory.\n    \n        If exception(s) occur, an Error is raised with a list of reasons.\n    \n        If the optional symlinks flag is true, symbolic links in the\n        source tree result in symbolic links in the destination tree; if\n        it is false, the contents of the files pointed to by symbolic\n        links are copied. If the file pointed by the symlink doesn't\n        exist, an exception will be added in the list of errors raised in\n        an Error exception at the end of the copy process.\n    \n        You can set the optional ignore_dangling_symlinks flag to true if you\n        want to silence this exception. Notice that this has no effect on\n        platforms that don't support os.symlink.\n    \n        The optional ignore argument is a callable. If given, it\n        is called with the `src` parameter, which is the directory\n        being visited by copytree(), and `names` which is the list of\n        `src` contents, as returned by os.listdir():\n    \n            callable(src, names) -> ignored_names\n    \n        Since copytree() is called recursively, the callable will be\n        called once for each directory that is copied. It returns a\n        list of names relative to the `src` directory that should\n        not be copied.\n    \n        The optional copy_function argument is a callable that will be used\n        to copy each file. It will be called with the source path and the\n        destination path as arguments. By default, copy2() is used, but any\n        function that supports the same signature (like copy()) can be used.\n    \n        If dirs_exist_ok is false (the default) and `dst` already exists, a\n        `FileExistsError` is raised. If `dirs_exist_ok` is true, the copying\n        operation will continue if it encounters existing directories, and files\n        within the `dst` tree will be overwritten by corresponding files from the\n        `src` tree.\n        \"\"\"\n        sys.audit(\"shutil.copytree\", src, dst)\n>       with os.scandir(src) as itr:\nE       NotADirectoryError: [WinError 267] The directory name is invalid: 'C:\\\\Users\\\\serge\\\\.wdm\\\\drivers\\\\geckodriver\\\\win64\\\\0.32\\\\geckodriver.exe'\n\nC:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\shutil.py:556: NotADirectoryError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initWebDriver","time":{"start":1665993000028,"stop":1665993006137,"duration":6109},"status":"broken","statusMessage":"NotADirectoryError: [WinError 267] The directory name is invalid: 'C:\\\\Users\\\\serge\\\\.wdm\\\\drivers\\\\geckodriver\\\\win64\\\\0.32\\\\geckodriver.exe'\n","statusTrace":"  File \"C:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\fixtures.py\", line 1121, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\fixtures.py\", line 893, in call_fixture_func\n    fixture_result = next(generator)\n  File \"D:\\AtidAutomation\\FinalProjectInfrastructure\\WebMobile\\TestCases\\conftest.py\", line 68, in initWebDriver\n    edriver = GetWebDriver()\n  File \"D:\\AtidAutomation\\FinalProjectInfrastructure\\WebMobile\\TestCases\\conftest.py\", line 93, in GetWebDriver\n    driver = GetFirefox()\n  File \"D:\\AtidAutomation\\FinalProjectInfrastructure\\WebMobile\\TestCases\\conftest.py\", line 114, in GetFirefox\n    ffDriver = SWebDriver.Firefox(GeckoDriverManager().install())  # Selenium 3x\n  File \"C:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py\", line 160, in __init__\n    firefox_profile = FirefoxProfile(firefox_profile)\n  File \"C:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\firefox\\firefox_profile.py\", line 74, in __init__\n    shutil.copytree(self.profile_dir, newprof,\n  File \"C:\\Users\\serge\\AppData\\Local\\Programs\\Python\\Python310\\lib\\shutil.py\", line 556, in copytree\n    with os.scandir(src) as itr:\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('initWebDriver')"},{"name":"parentSuite","value":"TestCases"},{"name":"suite","value":"test_Web"},{"name":"subSuite","value":"Test_Web"},{"name":"host","value":"DESKTOP-4TIB2C1"},{"name":"thread","value":"23364-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCases.test_Web"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('initWebDriver')"]},"source":"c2b6e3b8860aeed9.json","parameterValues":[]}